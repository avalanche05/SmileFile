/**
 * SmileFile
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Patient from '../model/Patient';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the patientsGet operation.
     * @callback module:api/DefaultApi~patientsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Patient>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить список всех пациентов
     * @param {module:api/DefaultApi~patientsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Patient>}
     */
    patientsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Patient];
      return this.apiClient.callApi(
        '/patients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patientsPatientIdGet operation.
     * @callback module:api/DefaultApi~patientsPatientIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Patient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получить конкретного пациента
     * @param {String} patientId 
     * @param {module:api/DefaultApi~patientsPatientIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Patient}
     */
    patientsPatientIdGet(patientId, callback) {
      let postBody = null;
      // verify the required parameter 'patientId' is set
      if (patientId === undefined || patientId === null) {
        throw new Error("Missing the required parameter 'patientId' when calling patientsPatientIdGet");
      }

      let pathParams = {
        'patientId': patientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Patient;
      return this.apiClient.callApi(
        '/patients/{patientId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patientsPatientIdPut operation.
     * @callback module:api/DefaultApi~patientsPatientIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Patient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Обновить информацию о пациенте
     * @param {String} patientId 
     * @param {module:model/Patient} patient 
     * @param {module:api/DefaultApi~patientsPatientIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Patient}
     */
    patientsPatientIdPut(patientId, patient, callback) {
      let postBody = patient;
      // verify the required parameter 'patientId' is set
      if (patientId === undefined || patientId === null) {
        throw new Error("Missing the required parameter 'patientId' when calling patientsPatientIdPut");
      }
      // verify the required parameter 'patient' is set
      if (patient === undefined || patient === null) {
        throw new Error("Missing the required parameter 'patient' when calling patientsPatientIdPut");
      }

      let pathParams = {
        'patientId': patientId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Patient;
      return this.apiClient.callApi(
        '/patients/{patientId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patientsPost operation.
     * @callback module:api/DefaultApi~patientsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Patient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Добавить нового пациента
     * @param {module:model/Patient} patient 
     * @param {module:api/DefaultApi~patientsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Patient}
     */
    patientsPost(patient, callback) {
      let postBody = patient;
      // verify the required parameter 'patient' is set
      if (patient === undefined || patient === null) {
        throw new Error("Missing the required parameter 'patient' when calling patientsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Patient;
      return this.apiClient.callApi(
        '/patients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
